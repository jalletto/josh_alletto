{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Need help creating your end user technical documentation? I provide technical writing services to all sorts of technology based organizations including not-for-profits, open-source projects, and startups. Sharing technical knowledge through writing is something I\u2019m very passionate about . As a Site Reliability Engineer, I am constantly learning. I know a huge factor in whether or not my colleagues and I adopt a new technology is the quality of its documentation. With over ten years experience as a teacher and curriculum creator and four years in the tech industry, I know how to create easy to understand, useful documentation and tutorials that have a developer focused audience. Check out some of my work .","title":"Home"},{"location":"#need-help-creating-your-end-user-technical-documentation","text":"I provide technical writing services to all sorts of technology based organizations including not-for-profits, open-source projects, and startups. Sharing technical knowledge through writing is something I\u2019m very passionate about . As a Site Reliability Engineer, I am constantly learning. I know a huge factor in whether or not my colleagues and I adopt a new technology is the quality of its documentation. With over ten years experience as a teacher and curriculum creator and four years in the tech industry, I know how to create easy to understand, useful documentation and tutorials that have a developer focused audience. Check out some of my work .","title":"Need help creating your end user technical documentation?"},{"location":"about-me/","text":"About Me Currently working as a Devops Engineer at Lessonly . I love learning and sharing what I\u2019ve learned through writing and teaching. My writing puts a strong emphasis on audience with thoroughly researched arguments and ideas. Past projects I've worked on include: blog campaigns for technical nonprofits, curriculum creation for coding bootcamps, and informational how-to articles for a variety of tech companies. I'd love to work with you on creating strong, in depth, and easy to follow product documentation and tutorials with a focus on an audience of developers. Email me at joshua.alletto@gmail.com","title":"About Me"},{"location":"about-me/#about-me","text":"Currently working as a Devops Engineer at Lessonly . I love learning and sharing what I\u2019ve learned through writing and teaching. My writing puts a strong emphasis on audience with thoroughly researched arguments and ideas. Past projects I've worked on include: blog campaigns for technical nonprofits, curriculum creation for coding bootcamps, and informational how-to articles for a variety of tech companies. I'd love to work with you on creating strong, in depth, and easy to follow product documentation and tutorials with a focus on an audience of developers. Email me at joshua.alletto@gmail.com","title":"About Me"},{"location":"contact-me/","text":"Let's Work Together","title":"Let's Work Together"},{"location":"contact-me/#lets-work-together","text":"","title":"Let's Work Together"},{"location":"my-work/","text":"Published Articles Using PostgreSQL Views in Django Views in PostgreSQL allow you to query against the results of another query. Views can be composed of columns from one or more tables or even other views, and they are easy to work with in a Django app. In this article, you\u2019ll learn about the two different types of Postgres views and how to decide when and if you should use them. Finally, you\u2019ll create a view and set up a Django app to use it. Keep reading OOMKilled: Troubleshooting Kubernetes Memory Requests and Limits If you\u2019ve been working with Kubernetes for any period of time, you\u2019ve probably come across the OOMkilled error. It can be a frustrating error to debug if you don\u2019t understand how it works. In this article, we\u2019ll take a closer look at the OOMKilled error, why this error occurs, how to troubleshoot it when it happens, and what steps you can take to help prevent it. Keep reading PostgreSQL Partitioning in Django Postgres 10 introduced partitioning to improve performance for very large database tables. You will typically start to see the performance benefits with tables of 1 million or more records, but the technical complexity usually doesn\u2019t pay off unless you\u2019re dealing with hundreds of gigabytes of data. Keep reading Can you Prevent Browser Fingerprinting? Browser fingerprinting is a method of identifying and tracking website visitors that doesn\u2019t rely on cookies or login sessions. Instead, visitors are identified by collecting a series of browser parameters, from browser version to screen dimensions and installed fonts. Each parameter is of limited utility on its own, but when combined with others can be used to create a unique identifier for each website visitor. Keep reading Python Code Coverage Using GitHub Actions and Codecov In this tutorial, we\u2019ll use a Python package called Coverage to generate a code coverage report locally. Then we\u2019ll utilize the power of Codecov along with GitHub Actions to integrate our coverage report into our pull requests. The code repository is available here or you can follow along to replicate it yourself. Keep reading Postgres Row-Level Security in Python and Django Postgres introduced row-level security in 2016 to give database administrators a way to limit the rows a user can access, adding an extra layer of data protection. What's nice about RLS is that if a user tries to select or alter a row they don't have access to, their query will return 0 rows, rather than throwing a permissions error. This way, a user can use select * from table_name , and they will only receive the rows they have access to with no knowledge of rows they don't. Keep reading Creating Custom Postgres Data Types in Rails Postgres ships with the most widely used common data types, like integers and text, built in, but it's also flexible enough to allow you to define your own data types if your project demands it. Say you're saving price data and you want to ensure that it\u2019s never negative. You might create a not_negative_int type that you could then use to define columns on multiple tables. Or maybe you have data that makes more sense grouped together, like GPS coordinates. Keep reading How to Write Effective Technical Articles Just because you know a topic well doesn\u2019t mean you\u2019ll crank out a great tutorial on the subject. Here are a few things to keep in mind to help you write informative, engaging, and useful technical tutorials: Keep reading Custom Postgres Data Types In Django No matter how you decide to define your datatype, Django has the functionality to allow you to map custom column data to model attributes. You can achieve this by extending the Django field class. In this walkthrough, we'll see how to create custom types in Postgres and then use them in Django to ensure consistent data types across your application. We will do this by walking you through an example project. Keep reading","title":"Published Articles"},{"location":"my-work/#published-articles","text":"","title":"Published Articles"},{"location":"my-work/#using-postgresql-views-in-django","text":"Views in PostgreSQL allow you to query against the results of another query. Views can be composed of columns from one or more tables or even other views, and they are easy to work with in a Django app. In this article, you\u2019ll learn about the two different types of Postgres views and how to decide when and if you should use them. Finally, you\u2019ll create a view and set up a Django app to use it. Keep reading","title":"Using PostgreSQL Views in Django"},{"location":"my-work/#oomkilled-troubleshooting-kubernetes-memory-requests-and-limits","text":"If you\u2019ve been working with Kubernetes for any period of time, you\u2019ve probably come across the OOMkilled error. It can be a frustrating error to debug if you don\u2019t understand how it works. In this article, we\u2019ll take a closer look at the OOMKilled error, why this error occurs, how to troubleshoot it when it happens, and what steps you can take to help prevent it. Keep reading","title":"OOMKilled: Troubleshooting Kubernetes Memory Requests and Limits"},{"location":"my-work/#postgresql-partitioning-in-django","text":"Postgres 10 introduced partitioning to improve performance for very large database tables. You will typically start to see the performance benefits with tables of 1 million or more records, but the technical complexity usually doesn\u2019t pay off unless you\u2019re dealing with hundreds of gigabytes of data. Keep reading","title":"PostgreSQL Partitioning in Django"},{"location":"my-work/#can-you-prevent-browser-fingerprinting","text":"Browser fingerprinting is a method of identifying and tracking website visitors that doesn\u2019t rely on cookies or login sessions. Instead, visitors are identified by collecting a series of browser parameters, from browser version to screen dimensions and installed fonts. Each parameter is of limited utility on its own, but when combined with others can be used to create a unique identifier for each website visitor. Keep reading","title":"Can you Prevent Browser Fingerprinting?"},{"location":"my-work/#python-code-coverage-using-github-actions-and-codecov","text":"In this tutorial, we\u2019ll use a Python package called Coverage to generate a code coverage report locally. Then we\u2019ll utilize the power of Codecov along with GitHub Actions to integrate our coverage report into our pull requests. The code repository is available here or you can follow along to replicate it yourself. Keep reading","title":"Python Code Coverage Using GitHub Actions and Codecov"},{"location":"my-work/#postgres-row-level-security-in-python-and-django","text":"Postgres introduced row-level security in 2016 to give database administrators a way to limit the rows a user can access, adding an extra layer of data protection. What's nice about RLS is that if a user tries to select or alter a row they don't have access to, their query will return 0 rows, rather than throwing a permissions error. This way, a user can use select * from table_name , and they will only receive the rows they have access to with no knowledge of rows they don't. Keep reading","title":"Postgres Row-Level Security in Python and Django"},{"location":"my-work/#creating-custom-postgres-data-types-in-rails","text":"Postgres ships with the most widely used common data types, like integers and text, built in, but it's also flexible enough to allow you to define your own data types if your project demands it. Say you're saving price data and you want to ensure that it\u2019s never negative. You might create a not_negative_int type that you could then use to define columns on multiple tables. Or maybe you have data that makes more sense grouped together, like GPS coordinates. Keep reading","title":"Creating Custom Postgres Data Types in Rails"},{"location":"my-work/#how-to-write-effective-technical-articles","text":"Just because you know a topic well doesn\u2019t mean you\u2019ll crank out a great tutorial on the subject. Here are a few things to keep in mind to help you write informative, engaging, and useful technical tutorials: Keep reading","title":"How to Write Effective Technical Articles"},{"location":"my-work/#custom-postgres-data-types-in-django","text":"No matter how you decide to define your datatype, Django has the functionality to allow you to map custom column data to model attributes. You can achieve this by extending the Django field class. In this walkthrough, we'll see how to create custom types in Postgres and then use them in Django to ensure consistent data types across your application. We will do this by walking you through an example project. Keep reading","title":"Custom Postgres Data Types In Django"}]}